#!/bin/bash
#playing with inputs

#to avoid needing a for loop across each key during lookup, ensure all previous
#matches in a sequence are in the table... make sense?
declare -A key_bindings=(
	["C-j"]=\ $'\n'	#put it back
	["C-["]="meta-"

	["meta-"]="meta-"

	["meta-O"]="meta2-"
	["meta-["]="meta2-"
	["meta2-"]="meta2-"

	#xterm mouse reporting
#	["meta2-M"]="mouse"

	["meta2-A"]="Up"
	["meta2-B"]="Down"
	["meta2-C"]="Right"
	["meta2-D"]="Left"
	["meta2-F"]="End"
	["meta2-H"]="Home"

	["meta2-1"]="meta2-1"	["meta2-1~"]="Home"
	["meta2-2"]="meta2-2"	["meta2-2~"]="Insert"
	["meta2-3"]="meta2-3"	["meta2-3~"]="Delete"
	["meta2-4"]="meta2-4"	["meta2-4~"]="End"
	["meta2-5"]="meta2-5"	["meta2-5~"]="PageUp"
	["meta2-6"]="meta2-6"	["meta2-6~"]="PageDown"

	#Xterm R6
	["meta2-P"]="F1"
	["meta2-Q"]="F2"
	["meta2-R"]="F3"
	["meta2-S"]="F4"

	#Linux
	["meta2-["]="meta2-["
	["meta2-[A"]="F1"
	["meta2-[B"]="F2"
	["meta2-[C"]="F3"
	["meta2-[D"]="F4"
	["meta2-[E"]="F5"

	#ESC[n~
	["meta2-1"]="meta2-1"
	["meta2-11"]="meta2-11"	["meta2-11~"]="F1"
	["meta2-12"]="meta2-12"	["meta2-12~"]="F2"
	["meta2-13"]="meta2-13"	["meta2-13~"]="F3"
	["meta2-14"]="meta2-14"	["meta2-14~"]="F4"
	["meta2-15"]="meta2-15"	["meta2-15~"]="F5"
	["meta2-17"]="meta2-17"	["meta2-17~"]="F6"
	["meta2-18"]="meta2-18"	["meta2-18~"]="F7"
	["meta2-19"]="meta2-19"	["meta2-19~"]="F8"
	["meta2-20"]="meta2-20"	["meta2-20~"]="F9"
	["meta2-21"]="meta2-21"	["meta2-21~"]="F10"
	["meta2-23"]="meta2-23"	["meta2-23~"]="F11"
	["meta2-24"]="meta2-24"	["meta2-24~"]="F12"

	#fun
	["w"]="w"
	["wt"]="wt"
	["wtf"]="what the FUCK!"

	[$'\001']="C-a"	[$'\002']="C-b"	[$'\003']="C-c"	[$'\004']="C-d"
	[$'\005']="C-e"	[$'\006']="C-f"	[$'\007']="C-g"	[$'\010']="C-h"
	[$'\011']="C-i"	[$'\012']="C-j"	[$'\013']="C-k"	[$'\014']="C-l"
	[$'\015']="C-m"	[$'\016']="C-n"	[$'\017']="C-o"	[$'\020']="C-p"
	[$'\021']="C-q"	[$'\022']="C-r"	[$'\023']="C-s"	[$'\024']="C-t"
	[$'\025']="C-u"	[$'\026']="C-v"	[$'\027']="C-w"	[$'\030']="C-x"
	[$'\031']="C-y"	[$'\032']="C-z"	[$'\033']='C-['	[$'\034']='C-\'
	[$'\035']='C-]'	[$'\036']='C-^'	[$'\037']='C-_'	[$'\177']='C-?'
)

handle_char() {
	local ch=$1 k l matches=0 cmd

	if [[ $ch ]]; then
		#pretreat...needed for control characters, because i'm dumb....?
		[[ ${key_bindings[$ch]} ]] && ch=${key_bindings[$ch]}
	else
		ch="C-@"	# NUL
	fi

	key_buf+=$ch
	[[ ${key_bindings[${key_buf}]} ]] && key_buf=${key_bindings[${key_buf}]}

	#this way we can handle time-out, i.e. just ESC
	if [[ ${key_bindings[${key_buf}]} ]] && IFS= read -rs -t 1 -N 1 ch; then
		handle_char "$ch"
	else
		case "$key_buf" in
			'meta2-M')	handle_mouse;;
			'meta-') toggle_mouse;;
			*)	printf '%s' "${key_buf}";;
		esac
		unset key_buf
	fi
}

mouse_status=1
toggle_mouse() {
	local status

	((mouse_status = !mouse_status))
	if ((mouse_status == 1)); then
		printf '\e[?1000h'
		status='mouse enabled'
	else
		printf '\e[?1000l'
		status='mouse disabled'
	fi
	tput clear
	tput setab 4
	printf '%*s\n' "-$(tput cols)" "$status"
	tput sgr0
}

handle_mouse() {
	local button x y b enc

	IFS= read -rs -N 3 enc

	#convert char->dec
	printf -v button '%d' "'${enc:0:1}"
	printf -v y '%d' "'${enc:1:1}"
	printf -v x '%d' "'${enc:2:1}"

	#silly button bits
	((button&4)) && b+='shift+'
	((button&8)) && b+='meta+'
	((button&16)) && b+='ctrl+'
	case "$(( ((64 & button) >> 4) | (button & 3) ))" in
		0) b+='button1';;
		1) b+='button2';;
		2) b+='button3';;
		3) b+='release';;
		4) b+='wheel-up';;
		5) b+='wheel-down';;
	esac

	((x-=33,y-=33))
	printf '%15s (%d,%d)\n' "$b" "$x" "$y"
}

exit_func() {
	printf '\e[?1000l'	#disable mouse
	tput reset
	tput clear
}

#some setup
trap exit_func EXIT
unset key_buf
toggle_mouse

while :; do
	IFS= read -rs -N 1 ch
	handle_char "$ch"
done
